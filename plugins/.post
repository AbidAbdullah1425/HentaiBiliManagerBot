from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import base64
import os
import subprocess
import random
import logging
from typing import Tuple, Optional
from bot import Bot
import asyncio
from config import OWNER_ID, DB_CHANNEL_ID, POST_CHANNEL_ID, BOT_USERNAME

# Logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def encode(text: str) -> str:
    return base64.urlsafe_b64encode(text.encode()).decode()

async def update_progress(msg: Message, step: int):
    bars = ["▯▯▯▯", "▮▯▯▯", "▮▮▯▯", "▮▮▮▯", "▮▮▮▮"]
    if step < len(bars):
        await msg.edit(f"✨ Processing... `{bars[step]}`")
        await asyncio.sleep(2)

async def generate_thumbnail(video_path: str) -> Tuple[Optional[str], Optional[str]]:
    output_path = f"thumb_{random.randint(1000, 9999)}.jpg"
    duration_cmd = [
        "ffprobe", "-v", "error", "-show_entries",
        "format=duration", "-of", "default=noprint_wrappers=1:nokey=1",
        video_path
    ]
    try:
        # Check ffprobe
        if subprocess.run(["ffprobe", "-version"], capture_output=True).returncode != 0:
            return None, "ffprobe not installed"

        result = subprocess.run(duration_cmd, capture_output=True, text=True)
        if result.returncode != 0:
            return None, f"ffprobe error: {result.stderr}"

        duration_str = result.stdout.strip()
        try:
            duration = float(duration_str)
            capture_time = max(1, duration * 0.9)
        except ValueError:
            capture_time = 5  # fallback if duration is N/A

        # Check ffmpeg
        if subprocess.run(["ffmpeg", "-version"], capture_output=True).returncode != 0:
            return None, "ffmpeg not installed"

        cmd = [
            "ffmpeg", "-i", video_path, "-ss", str(capture_time),
            "-vframes", "1", "-q:v", "2", output_path
        ]
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            return None, f"ffmpeg error: {result.stderr}"

        if not os.path.exists(output_path):
            return None, "Thumbnail not created"

        return output_path, None

    except FileNotFoundError:
        return None, "FFmpeg or ffprobe not found"
    except Exception as e:
        return None, f"Error: {str(e)}"

@Bot.on_message(filters.command("post") & filters.private & filters.user(OWNER_ID))
async def post_panel(client: Client, message: Message):
    video_path = None
    thumb_path = None
    try:
        # Step 1: Ask for title
        await message.reply("📝 Enter a <b>title</b>:")
        title_msg = await client.listen(message.chat.id, filters=filters.text, timeout=60)
        title = title_msg.text.strip()
        await title_msg.delete()

        # Step 2: Ask for video link
        await message.reply("🎥 Send the <b>video link</b>:")
        video_msg = await client.listen(message.chat.id, filters=filters.text, timeout=60)
        video_url = video_msg.text.strip()
        await video_msg.delete()

        # Step 3: Show progress
        progress = await message.reply("✨ Processing... ▯▯▯▯")
        await update_progress(progress, 1)

        # Step 4: Download video
        async with aiohttp.ClientSession() as session:
            async with session.get(video_url) as resp:
                if resp.status != 200:
                    await progress.edit(f"❌ Failed to download video (HTTP {resp.status})")
                    return
                video_data = await resp.read()

        video_path = f"video_{message.from_user.id}.mp4"
        with open(video_path, "wb") as f:
            f.write(video_data)

        await update_progress(progress, 2)

        # Step 5: Generate thumbnail
        thumb_path, thumb_error = await generate_thumbnail(video_path)
        if not thumb_path:
            logger.warning(f"Thumbnail generation failed: {thumb_error}")
            thumb_path = None  # Continue without thumbnail

        await update_progress(progress, 3)

        # Step 6: Upload video to DB channel
        db_caption = f"<b>{title}</b>\n\n💣 ~ <a href='tg://user?id={OWNER_ID}'>OnlyNoco</a>"
        sent_msg = await client.send_video(
            chat_id=DB_CHANNEL_ID,
            video=video_path,
            file_name=f"{title}.mp4",
            caption=db_caption,
            parse_mode="HTML"
        )

        await update_progress(progress, 4)

        # Clean local files
        for path in [video_path, thumb_path]:
            if path and os.path.exists(path):
                os.remove(path)

        # Step 7: Generate public post
        encoded = encode(f"get-{sent_msg.id * abs(DB_CHANNEL_ID)}")
        start_link = f"https://t.me/{BOT_USERNAME}?start={encoded}"

        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("📺 Watch / Download", url=start_link)]
        ])

        if thumb_path:
            await client.send_photo(
                chat_id=POST_CHANNEL_ID,
                photo=thumb_path,
                caption=f"<b>{title}</b>\n\n💣 ~ <a href='tg://user?id={OWNER_ID}'>OnlyNoco</a>",
                reply_markup=buttons,
                parse_mode="HTML"
            )
        else:
            await client.send_message(
                chat_id=POST_CHANNEL_ID,
                text=f"<b>{title}</b>\n\n💣 ~ <a href='tg://user?id={OWNER_ID}'>OnlyNoco</a>",
                reply_markup=buttons,
                parse_mode="HTML"
            )

        await progress.edit("✅ Post published successfully! 🎉")

    except Exception as e:
        for path in [video_path, thumb_path]:
            if path and os.path.exists(path):
                os.remove(path)
        await message.reply(f"❌ Error: {str(e)}")